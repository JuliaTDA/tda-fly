---
title: "Diaptera wings classification using Topological Data Analysis"
author:
  - name: Guilherme Vituri F. Pinto
    orcid: 0000-0002-7813-8777
    corresponding: true
    email: vituri.vituri@gmail.com
    roles:
      - Investigation
      - Project administration
      - Software
      - Visualization
    affiliations:
      - Unesp
  - name: Sergio Ura
  - name: Northon
keywords:
  - Topological Data Analysis
  - Persistent homology
abstract: |
  We studied etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc  etc etc etc 
plain-language-summary: |
  Earthquake data for the island of La Palma from the September 2021 eruption is found ...
key-points:
  - A web scraping script was developed to pull data from the Instituto GeogrÃ phico Nacional into a machine-readable form for analysis
  - Earthquake events on La Palma are consistent with the presence of both mantle and crustal reservoirs.
date: last-modified
bibliography: references.bib
citation:
  container-title: Earth and Space Science
number-sections: true
---

```{julia}
using TDAfly, TDAfly.Preprocessing, TDAfly.TDA, TDAfly.Analysis
using Images: mosaicview
using Plots: plot, display, heatmap
using PersistenceDiagrams
```

## Introduction

Falar sobre o dataset, TDA, etc.

## Methods

We load all wings into images

```{julia}
paths = readdir("images/processed", join = true)
species = basename.(paths) .|> (x -> replace(x, ".png" => ""))
individuals = map(species) do specie
  s = split(specie, " ")
  s[1][1] * "-" * s[2]
end
wings = load_wing.(paths)
Xs = map(image_to_r2, wings);
```

```{julia}
mosaicview(wings, ncol = 4, fillvalue=1)
```

### Vietoris-Rips filtration

We select 500 points from each image using a farthest point sample method

```{julia}
samples = map(Xs) do X
  ids = farthest_points_sample(X, 500)
  X[ids]
end;
```

We then calculate its persistence diagrams using the Vietoris-Rips filtration etc.

```{julia}
# get only the 1-dimensional PD
rips = rips_pd.(samples, cutoff = 5, threshold = 200) .|> last;
```

We create the 1-dimensional persistence image for each persistence diagram using 10x10 matrices

```{julia}
PI = PersistenceImage(rips, size = (10, 10))

images_rips = PI.(rips);
```

### Examples

Below are some examples of 1-dimensional barcodes, its persistence image and the original wing that generated it. Note: we are plotting the barcode using the birth and persistence.

```{julia}
# plot some images to see the barcodes
map([1, 4, 8, 10, 15]) do i
  p = plot_wing_with_pd(rips[i], images_rips[i], samples[i], species[i])
  display(p)
end;
```


We now calculate the Euclidean distance between each persistence image (seen as a vector of $\mathbb{R}^{10x10}$) and plot its heatmap

```{julia}
D = pairwise_distance(images_rips);
```

```{julia}
plot_heatmap(D, individuals, "Distance matrix for Vietoris-Rips barcodes")
```

### Persistence Homology Transform

Now we will create several filtrations based on points and lines, etc.

```{julia}
A = wings[1] |> image_to_array;
f = dist_to_point(0, 0)
Af = modify_array(A, f)
heatmap(Af)
```

```{julia}
point_pds = cubical_pd(Af, cutoff = 0.05)
plot_pd(point_pds)
```

